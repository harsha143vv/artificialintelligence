import math

def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 9)

def evaluate(board):
    for row in board:
        if all([cell == 'X' for cell in row]):
            return 10
        elif all([cell == 'O' for cell in row]):
            return -10

    for col in range(3):
        if all([board[row][col] == 'X' for row in range(3)]):
            return 10
        elif all([board[row][col] == 'O' for row in range(3)]):
            return -10

    if all([board[i][i] == 'X' for i in range(3)]) or all([board[i][2-i] == 'X' for i in range(3)]):
        return 10
    elif all([board[i][i] == 'O' for i in range(3)]) or all([board[i][2-i] == 'O' for i in range(3)]):
        return -10

    return 0

def is_board_full(board):
    return all([cell != ' ' for row in board for cell in row])

def minimax_alpha_beta(board, depth, is_maximizing, alpha, beta):
    if is_maximizing:
        best_val = -math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'X'
                    value = minimax_alpha_beta(board, depth + 1, False, alpha, beta)
                    best_val = max(best_val, value)
                    alpha = max(alpha, best_val)
                    board[i][j] = ' '
                    if beta <= alpha:
                        break
        return best_val
    else:
        best_val = math.inf
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = 'O'
                    value = minimax_alpha_beta(board, depth + 1, True, alpha, beta)
                    best_val = min(best_val, value)
                    beta = min(beta, best_val)
                    board[i][j] = ' '
                    if beta <= alpha:
                        break
        return best_val

def find_best_move(board):
    best_move = (-1, -1)
    best_score = -math.inf
    alpha = -math.inf
    beta = math.inf

    for i in range(3):
        for j in range(3):
            if board[i][j] == ' ':
                board[i][j] = 'X'
                move_score = minimax_alpha_beta(board, 0, False, alpha, beta)
                board[i][j] = ' '

                if move_score > best_score:
                    best_score = move_score
                    best_move = (i, j)

    return best_move

def play_tic_tac_toe():
    board = [[' ' for _ in range(3)] for _ in range(3)]
    current_player = 'X'

    while True:
        print_board(board)

        if current_player == 'X':
            row, col = find_best_move(board)
        else:
            row = int(input(f"Player {current_player}, enter row (0-2): "))
            col = int(input(f"Player {current_player}, enter column (0-2): "))

        if board[row][col] == ' ':
            board[row][col] = current_player

            if evaluate(board) == 10:
                print_board(board)
                print(f"Player {current_player} wins!")
                break
            elif is_board_full(board):
                print_board(board)
                print("It's a draw!")
                break
            else:
                current_player = 'O' if current_player == 'X' else 'X'
        else:
            print("Cell already occupied. Try again.")

play_tic_tac_toe()
