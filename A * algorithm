import heapq

# Example graph represented as a grid
grid = [
    [0, 0, 0, 0, 0],
    [0, 1, 0, 1, 0],
    [0, 0, 0, 0, 0],
    [0, 1, 0, 1, 0],
    [0, 0, 0, 0, 0]
]

# Define possible movements (up, down, left, right)
movements = [(1, 0), (-1, 0), (0, 1), (0, -1)]

# A* algorithm implementation
def astar(start, goal):
    open_set = [(0, start)]  # Priority queue: (f_score, node)
    g_score = {start: 0}
    f_score = {start: heuristic(start, goal)}

    while open_set:
        _, current = heapq.heappop(open_set)

        if current == goal:
            path = []
            while current in came_from:
                path.insert(0, current)
                current = came_from[current]
            path.insert(0, start)
            return path

        for move in movements:
            new_x = current[0] + move[0]
            new_y = current[1] + move[1]
            neighbor = (new_x, new_y)

            if not (0 <= new_x < len(grid) and 0 <= new_y < len(grid[0])):
                continue
            if grid[new_x][new_y] == 1:
                continue

            tentative_g_score = g_score[current] + 1

            if neighbor not in g_score or tentative_g_score < g_score[neighbor]:
                came_from[neighbor] = current
                g_score[neighbor] = tentative_g_score
                f_score[neighbor] = g_score[neighbor] + heuristic(neighbor, goal)
                heapq.heappush(open_set, (f_score[neighbor], neighbor))

    return None  # No path found

def heuristic(node, goal):
    # Manhattan distance heuristic
    return abs(node[0] - goal[0]) + abs(node[1] - goal[1])

# Example start and goal positions
start = (0, 0)
goal = (4, 4)

came_from = {}  # To store the path

# Find and print the shortest path using A*
path = astar(start, goal)
if path:
    print("Shortest path:", path)
else:
    print("No path found.")
