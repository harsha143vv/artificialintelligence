import itertools

def euclidean_distance(point1, point2):
    return ((point1[0] - point2[0])**2 + (point1[1] - point2[1])**2)**0.5

def total_distance(path, cities):
    distance = 0
    for i in range(len(path) - 1):
        distance += euclidean_distance(cities[path[i]], cities[path[i+1]])
    distance += euclidean_distance(cities[path[-1]], cities[path[0]])
    return distance

def brute_force_tsp(cities):
    num_cities = len(cities)
    min_distance = float('inf')
    optimal_path = []

    for path in itertools.permutations(range(num_cities)):
        distance = total_distance(path, cities)
        if distance < min_distance:
            min_distance = distance
            optimal_path = path

    return optimal_path, min_distance

# Example cities in the format (x, y)
cities = [(0, 0), (1, 3), (2, 6), (4, 2), (5, 5)]

optimal_path, min_distance = brute_force_tsp(cities)

print("Optimal path:", optimal_path)
print("Minimum distance:", min_distance)
